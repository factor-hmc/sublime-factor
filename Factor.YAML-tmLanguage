# [PackageDev] target_format: plist, ext: tmLanguage
---

name: Factor
scopeName: source.factor
fileTypes: [factor]
uuid: 99b9cd1a-732f-4f60-a56f-b01cffb562ba

patterns:
- include: '#comments'
- include: '#directives'
- include: '#directive-arguments'
- include: '#definitions'
- include: '#stack-effects'
- include: '#expressions'

repository:

  comments:
    patterns:
    - name: comment.line
      match: (^|\s)\!.*$

  directives:
    patterns:
    - name: keyword.control
      match: ([A-Z]\S*\:)

  directive-arguments:
    patterns:
    - name: invalid.illegal
      match: (?<=(USE:\s))(\S+)(\s\S+)+(?=$|\s)
    - name: invalid.illegal
      match: (?<=(MAIN:\s))(\S+)(\s\S+)+(?=$|\s)
    - name: invalid.illegal
      match: (?<=(IN:\s))(\S+)(\s\S+)+(?=$|\s)
    - name: entity.name.section
      match: (?<=(USE:\s))(\S+)(?=$|\s)
    - name: entity.name.function
      match: (?<=(MAIN:\s))(\S+)(?=$|\s)
    - name: entity.name.section
      match: (?<=(IN:\s))(\S+)(?=$|\s)
    - name: entity.name.section
      match: (?<=(USING:\s))(\S+)(\s\S+)*(?=$|\s)

  definitions:
    patterns:
    - name: entity.name.function
      match: (?<=(:\s))(\S+)(?=$|\s)

  stack-effects:
    patterns:
    - name: meta.group
      begin: (\s+\(\s+)
      beginCaptures:
        '0': {name: keyword.operator}
      end: (\s+\)\s+)
      endCaptures:
        '0': {name: keyword.operator}
      patterns:
      - include: '#stack-effect-separator'
      - include: '#parameters'

  parameters:
    patterns:
    - name: variable.parameter
      match: (?<=^|\s)(\S+)(?=$|\s)

  stack-effect-separator:
    patterns:
    - name: keyword.operator
      match: (--)

  expressions:
    patterns:
    - include: '#literals'
    - include: '#strings'
    - include: '#special'

  literals:
    patterns:
    - name: constant.numeric
      match: (?<=^|\s)[+-]*\d+\.?\d*(?=$|\s)
    - name: constant.language
      match: (?<=^|\s)(t|f)(?=$|\s)

  strings:
    patterns:
    - name: string.quoted.double
      begin: '"'
      end: '"'
      patterns:
      - match: (\\\\|\\n|\\r|\\t|\\"|\\')
        name: constant.character.escape

  special:
    patterns:
    - name: keyword.operator
      match: (?<=^|\s)(\[|\]|:|::|;|\(|\)|--|{|}|\+|-|\*|/)(?=$|\s)
    - name: keyword.control
      match: (?<=^|\s)(if|call|drop|dropd|drop2|dup|dupd|dup2|dup3|swap|swapd|swap2|rot|-rot)(?=$|\s)
    - name: entity.name.tag
      match: (?<=^|\s)(recursive|inline)(?=$|\s)

...
