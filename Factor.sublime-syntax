%YAML 1.2
---
name: Factor
file_extensions: [factor]
scope: source.factor
variables:
  space_before: (?<!\S)
  space_after: (?!\S)
  eol_or_eof: ($\n?)
  semicolon: ({{space_before}};{{space_after}})
  double_dash: ({{space_before}}\-\-{{space_after}})
  left_paren: ({{space_before}}\({{space_after}})
  right_paren: ({{space_before}}\){{space_after}})
  identifier: ({{space_before}}\S+{{space_after}})
  debris: (\S+)
contexts:
  main:
    - include: comments
    - include: declarations
    - include: directives
  comments:
    - match: ({{space_before}}!{{space_after}})
      scope: punctuation.definition.comment.factor
      push: line_comment
  line_comment:
    - meta_scope: comment.line.factor
    - match: ({{eol_or_eof}})
      pop: true
  expressions:
    - match: ({{space_before}}(|P|SBUF|DLL|URL)")
      scope: punctuation.definition.string.begin.factor
      push: double_quoted_string
    - match: ({{space_before}}(\S*(\[|\(|\{)\S*|\]|\)|\}){{space_after}})
      scope: keyword.control.factor
    - match: ({{space_before}}[^a-zA-Z0-9;]+{{space_after}})
      scope: keyword.operator.factor
    - match: ({{space_before}}(t|f){{space_after}})
      scope: constant.language.factor
    - match: ({{space_before}}[+-]?\d+(\.\d+)?{{space_after}})
      scope: constant.numeric.factor
  double_quoted_string:
    - meta_scope: string.quoted.double.factor
    - match: (\\(\\|s|t|n|r|b|v|f|0|e|"|\d{3}|u\d{6}|u{\w+}))
      scope: constant.character.escape.factor
    - match: (\\.)
      scope: invalid.illegal.factor
    - match: ("{{space_after}})
      scope: punctuation.definition.string.end.factor
      pop: true
    - match: (")
      scope: invalid.illegal
  directives:
    - match: ({{space_before}}USE:{{space_after}})
      scope: keyword.control.factor
      push: use_directive
    - match: ({{space_before}}USING:{{space_after}})
      scope: keyword.control.factor
      push: using_directive
    - match: ({{space_before}}MAIN:{{space_after}})
      scope: keyword.control.factor
      push: main_directive
    - match: ({{space_before}}IN:{{space_after}})
      scope: keyword.control.factor
      push: in_directive
    - match: ({{space_before}}TUPLE:{{space_after}})
      scope: keyword.control.factor
      push: tuple_directive
    - match: ({{space_before}}GENERIC:{{space_after}})
      scope: keyword.control.factor
      push: generic_directive
    - match: ({{space_before}}M:{{space_after}})
      scope: keyword.control.factor
      push: method_directive
    - match: ({{space_before}}[A-Z]\S*:{{space_after}})
      scope: keyword.control.factor
      push: other_directive
  use_directive:
    - meta_scope: meta.use_directive.factor
    - include: comments
    - match: ({{identifier}})
      scope: entity.name.namespace.factor
      pop: true
    - match: ({{debris}})
      scope: invalid.illegal.factor
  using_directive:
    - meta_scope: meta.using_directive.factor
    - include: comments
    - match: ({{semicolon}})
      scope: punctuation.terminator.factor
      pop: true
    - match: ({{identifier}})
      scope: entity.name.namespace.factor
    - match: ({{debris}})
      scope: invalid.illegal.factor
  main_directive:
    - meta_scope: meta.main_directive.factor
    - include: comments
    - match: ({{identifier}})
      scope: entity.name.function.factor
      pop: true
    - match: ({{debris}})
      scope: invalid.illegal.factor
  in_directive:
    - meta_scope: meta.in_directive.factor
    - include: comments
    - match: ({{identifier}})
      scope: entity.name.namespace.factor
      pop: true
    - match: ({{debris}})
      scope: invalid.illegal.factor
  tuple_directive:
    - meta_scope: meta.tuple_directive.factor
    - include: comments
    - match: ({{identifier}})
      scope: entity.name.struct.factor
      set: tuple_directive_post_type_name
    - match: ({{debris}})
      scope: invalid.illegal.factor
  tuple_directive_post_type_name:
    - meta_scope: meta.tuple_directive.post_type_name.factor
    - include: comments
    - match: ({{space_before}}<{{space_after}})
      scope: keyword.control.factor
      set: tuple_directive_superclass
    - match: ({{identifier}})
      scope: variable.parameter.factor
      set: tuple_directive_body
  tuple_directive_superclass:
    - meta_scope: meta.tuple_directive.superclass.factor
    - include: comments
    - match: ({{identifier}})
      scope: entity.name.struct.factor
      set: tuple_directive_body
    - match: ({{debris}})
      scope: invalid.illegal.factor
  tuple_directive_body:
    - meta_scope: meta.tuple_directive.body.factor
    - include: comments
    - match: ({{semicolon}})
      scope: punctuation.terminator.factor
      pop: true
    - match: ({{identifier}})
      scope: variable.parameter.factor
    - match: ({{debris}})
      scope: invalid.illegal.factor
  generic_directive:
    - meta_scope: meta.generic_directive.factor
    - include: comments
    - match: ({{identifier}})
      scope: entity.name.function.factor
      set: generic_directive_pre_stack_effect
  generic_directive_pre_stack_effect:
    - meta_scope: meta.generic_directive.pre_stack_effect.factor
    - include: comments
    - match: ({{left_paren}})
      scope: keyword.control.factor
      set: generic_directive_stack_effect
    - match: ({{debris}})
      scope: invalid.illegal.factor
  generic_directive_stack_effect:
    - meta_scope: meta.generic_directive.stack_effect.factor
    - include: comments
    - match: ({{right_paren}})
      scope: keyword.control.factor
      pop: true
    - match: ({{left_paren}})
      scope: keyword.control.factor
      push: generic_directive_stack_effect
    - match: ({{double_dash}})
      scope: punctuation.separator.factor
    - match: ({{identifier}})
      scope: variable.parameter.factor
  method_directive:
    - meta_scope: meta.method_directive.factor
    - include: comments
    - match: ({{identifier}})
      scope: entity.name.type.factor
      set: method_directive_function_name
  method_directive_function_name:
    - meta_scope: meta.method_directive.function_name.factor
    - include: comments
    - match: ({{identifier}})
      scope: entity.name.function.factor
      set: method_directive_body
  method_directive_body:
    - meta_scope: meta.method_directive.body.factor
    - include: comments
    - match: ({{semicolon}})
      scope: punctuation.terminator.factor
      pop: true
    - include: expressions
  other_directive:
    - meta_scope: meta.other_directive.factor
    - include: comments
    - match: ({{eol_or_eof}})
      pop: true
    - match: ({{semicolon}})
      scope: punctuation.terminator.factor
      pop: true
  declarations:
    - match: ({{space_before}}(MEMO:|::|:){{space_after}})
      scope: keyword.control.factor
      push: verb_declaration
  verb_declaration:
    - meta_scope: meta.verb_declaration.factor
    - include: comments
    - match: ({{identifier}})
      scope: entity.name.function.factor
      set: pre_stack_effect
    - match: ({{debris}})
      scope: invalid.illegal.factor
  pre_stack_effect:
    - meta_scope: meta.verb_declaration.pre_stack_effect.factor
    - include: comments
    - match: ({{left_paren}})
      scope: keyword.control.factor
      set: stack_effect
    - match: ({{debris}})
      scope: invalid.illegal.factor
  stack_effect:
    - meta_scope: meta.verb_declaration.stack_effect.factor
    - include: comments
    - match: ({{right_paren}})
      scope: keyword.control.factor
      set: verb_body
      # TODO: above needs to pop instead of set to do nested stack effects
    - match: ({{left_paren}})
      scope: keyword.control.factor
      push: stack_effect
    - match: ({{double_dash}})
      scope: punctuation.separator.factor
    - match: ({{identifier}})
      scope: variable.parameter.factor
  verb_body:
    - meta_scope: meta.verb_declaration.body.factor
    - include: comments
    - match: ({{semicolon}})
      scope: punctuation.terminator.factor
      set: verb_post_body
    - include: expressions
  verb_post_body:
    - meta_scope: meta.verb_declaration.post_body.factor
    - include: comments
    - match: ({{space_before}}(inline|foldable|flushable|recursive){{space_after}})
      scope: storage.modifier.factor
    - include: declarations
    - include: directives
